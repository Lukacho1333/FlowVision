# FlowVision Development Rules for GitHub Best Practices

## Core Development Principles

You are an expert development assistant for the FlowVision project. Always follow these rules to maintain clean, synchronized, and professional GitHub repository management.

## GitHub Workflow Requirements

### Branch Management
- **NEVER commit directly to main branch** - ZERO EXCEPTIONS
- **ALWAYS create feature branches** with descriptive names: `feature/description-of-work`
- **ALWAYS verify branch protection** is enabled before making changes
- **ALWAYS keep feature branches small and focused** (single feature/fix per branch)
- **ALWAYS delete merged feature branches** both locally and remotely
- **MANDATORY**: All main branch changes MUST go through Pull Request process

### Commit Standards
- **ALWAYS use conventional commit format**: `type(scope): description`
  - Types: `feat`, `fix`, `docs`, `style`, `refactor`, `test`, `chore`
  - Examples: `feat(clusters): add view details modal`, `fix(auth): resolve login redirect issue`
- **ALWAYS test locally before committing**
- **ALWAYS run `npm test` and ensure it passes**
- **ALWAYS clear build cache** (`rm -rf .next`) if encountering React/build errors
- **NEVER use `--no-verify` flag** - fix issues instead of bypassing checks

### Pull Request Process
- **ALWAYS create PR for any code changes**
- **ALWAYS include descriptive PR title and description**
- **ALWAYS request review before merging**
- **ALWAYS ensure CI/CD checks pass before requesting review**
- **ALWAYS resolve merge conflicts locally, never in GitHub UI**
- **NEVER force push to shared branches**
- **NEVER bypass branch protection without explicit approval**
- **NEVER merge PR with failing CI/CD checks**
- **MANDATORY**: PRs with >10 TypeScript errors must be fixed before review

### Code Quality Gates - MANDATORY ENFORCEMENT
- **ALWAYS run linting**: `npm run lint` (fix issues before committing)
- **ALWAYS run tests**: `npm test` (must pass before pushing)
- **ALWAYS verify build**: `npm run build` (for production readiness)
- **ALWAYS check for TypeScript errors**: Address all `tsc --noEmit` warnings
- **ALWAYS validate database schema changes** with `npx prisma validate`
- **ZERO TOLERANCE**: No commits allowed with TypeScript errors >5
- **MANDATORY**: Environment variables must be configured before testing

## Pre-Commit Checklist - MANDATORY VALIDATION

Before every commit, verify:
- [ ] **TypeScript Check**: `npx tsc --noEmit` shows 0 errors
- [ ] **Test Suite**: `npm test` passes with 0 failures
- [ ] **Linting**: `npm run lint` shows 0 errors
- [ ] **Build Validation**: `npm run build` completes successfully
- [ ] **Schema Validation**: `npx prisma validate` if schema changed
- [ ] Code changes are tested locally
- [ ] No console.log statements in production code
- [ ] No hardcoded values (use environment variables)
- [ ] All imports are properly typed
- [ ] No unused variables or imports
- [ ] Database queries use proper error handling
- [ ] API routes have proper authentication checks
- [ ] React components use proper key props in lists
- [ ] Environment variables are documented and configured
- [ ] Dependencies are properly installed and configured

## Sync Management

### Daily Sync Protocol
1. **Start of day**: `git pull origin main`
2. **Before creating branch**: Ensure main is up-to-date
3. **End of work**: Push feature branch and create PR
4. **Never leave uncommitted changes** in working directory

### Emergency Procedures - STRICT PROTOCOL
If you encounter:
- **React "Objects are not valid as React child"**: Clear build cache with `rm -rf .next`
- **Module not found errors**: Clear cache and restart dev server
- **GitHub sync issues**: Create new feature branch from latest main
- **CI/CD failures**: Fix issues locally, NEVER bypass checks with `--no-verify`
- **Merge conflicts**: Resolve locally with `git rebase main`
- **TypeScript null/undefined errors**: Transform Prisma nulls to undefined using `?? undefined`
- **Stuck interactive rebase**: Remove `.git/*.swp` files and set `git config core.editor "cat"`
- **Merge conflict markers in files**: Manually resolve all `<<<<<<<`, `=======`, `>>>>>>>` markers
- **Test failures**: Fix environment variables and dependencies, NEVER ignore
- **TypeScript errors >10**: Create separate cleanup PR before feature work
- **Missing dependencies**: Install and configure properly, document in PR

## Repository Hygiene

### File Management
- **ALWAYS add appropriate .gitignore entries** for build artifacts
- **NEVER commit**: `.next/`, `node_modules/`, `.env.local`, IDE files
- **ALWAYS commit**: Lock files (`package-lock.json`, `yarn.lock`)
- **ALWAYS use absolute paths** in tool configurations when possible

### Documentation
- **ALWAYS update README.md** for significant feature additions
- **ALWAYS document API changes** in relevant files
- **ALWAYS add JSDoc comments** for complex functions
- **ALWAYS update CHANGELOG.md** for releases

## Error Prevention Rules

### React/Next.js Specific
- **ALWAYS use TypeScript strict mode**
- **ALWAYS define interfaces** for component props and API responses
- **ALWAYS handle loading and error states** in components
- **ALWAYS use proper async/await patterns** in API routes
- **NEVER render objects directly** in JSX (use specific properties)

### Database/Prisma
- **ALWAYS use transactions** for multi-table operations
- **ALWAYS validate input** before database queries
- **ALWAYS handle Prisma errors** with try/catch blocks
- **ALWAYS test schema changes** with seed data
- **ALWAYS transform** database `null` to `undefined` for external APIs using `?? undefined`

### AI/LLM Integration
- **ALWAYS validate** AI service configuration before use (`isConfigured()`)
- **ALWAYS include** confidence scores for AI-generated content
- **ALWAYS provide** fallback when AI services are unavailable
- **ALWAYS sanitize** AI responses before database storage
- **ALWAYS track** AI usage and costs in audit logs
- **ALWAYS indicate** AI-generated content with clear attribution
- **NEVER expose** OpenAI API keys in client-side code
- **ALWAYS use null-safe operations** for optional AI fields (`|| []` fallbacks)
- **ALWAYS provide proper context** for AI recommendations (systems, processes, people)

### Security
- **ALWAYS validate user permissions** in API routes
- **ALWAYS sanitize user input** before database operations
- **ALWAYS use environment variables** for secrets
- **NEVER commit API keys or passwords**
- **ALWAYS enforce tenant isolation** with organizationId filtering in multi-tenant APIs
- **NEVER bypass organizationId filtering** regardless of user role or admin status
- **ALWAYS validate organizationId exists** on records before API operations
- **ALWAYS test multi-tenant scenarios** during API development

## Tool Integration - MANDATORY VALIDATION

### Required Commands - ZERO TOLERANCE POLICY
Before any PR:
```bash
# Environment setup validation
npm install
export DATABASE_URL="your-database-url"
export OPENAI_API_KEY="your-openai-key"
export AI_CONFIG_ENCRYPTION_KEY="your-encryption-key"

# Clean build
rm -rf .next node_modules/.cache

# MANDATORY validation sequence - ALL MUST PASS
npx tsc --noEmit          # MUST show 0 errors
npm run lint              # MUST show 0 errors  
npm test                  # MUST pass all tests
npm run build             # MUST complete successfully

# Database validation (if schema changed)
npx prisma validate
npx prisma generate
```

### GitHub CLI Usage - STRICT ENFORCEMENT
- Use `gh pr create` for consistent PR creation
- Use `gh pr status` to check PR state
- Use `gh pr checks` to verify CI/CD status - MUST be green
- Use `gh issue list` to track open issues
- **MANDATORY**: `gh pr checks` must show all green before merge
- **FORBIDDEN**: Merging PRs with any failing checks

## Memory Management

Remember these key project facts:
- Project uses Docker for development environment
- Prefer no icons/emojis in user-facing content
- Keep 'facebook-ad-campaign' and 'Google_PPC' folders local only
- Main branch requires PR workflow with reviews
- All major features need comprehensive testing
- Systems Enhancement is major release - use proper GitHub project management
- Always include addressedIssues in initiative queries to prevent undefined errors
- Use proper null checking for all optional array fields in frontend components
- Current sprint details are in SYSTEMS_ENHANCEMENT_EXECUTION_PLAN.md
- Team capacity is ~60 story points per 2-week sprint with 10% buffer
- Sprint naming follows: Sprint X (dates) with clear goals and deliverables
- Expert profiles available in EXPERT_PROFILES_SYSTEM.md for consistent decision-making
- Background automation workflows defined in CURSOR_BACKGROUND_AUTOMATION.md

## Conflict Resolution Best Practices

### Merge Conflict Prevention
- **ALWAYS rebase** feature branches regularly with main
- **KEEP branches** small and focused (single responsibility)
- **COMMUNICATE** with team before large refactoring
- **TEST locally** before pushing any merge resolution

### When Conflicts Occur
1. **STOP** and assess the scope of conflicts
2. **BACKUP** current work with `git stash` if needed
3. **RESOLVE** conflicts in order: simple to complex
4. **TEST thoroughly** after each resolution
5. **COMMIT** with descriptive merge commit message
6. **VERIFY** CI/CD passes before requesting reviews

### Common Conflict Patterns
- **Import statements**: Usually safe to combine both imports
- **Function implementations**: Choose the more complete version
- **Configuration files**: Merge security and functionality features
- **Type definitions**: Combine interfaces, avoid duplicates

## Systems Enhancement Project Rules

### Sprint Planning & Execution Framework
- **ALWAYS reference** SYSTEMS_ENHANCEMENT_EXECUTION_PLAN.md for current sprint details
- **ALWAYS update** completion status in the execution plan when stories are done
- **ALWAYS validate** story acceptance criteria before marking complete
- **ALWAYS conduct** sprint retrospectives and update velocity metrics
- **ALWAYS adjust** future sprint planning based on actual capacity

### Feature Development Protocol
- **ALWAYS use GitHub Projects** for milestone and task tracking
- **ALWAYS create detailed issues** before starting development
- **ALWAYS link commits to issues** using `#issue-number` in commit messages
- **ALWAYS update project status** when moving between development phases
- **ALWAYS coordinate with team** before modifying shared components
- **ALWAYS create feature branch** following pattern: `feature/sprint-X-story-Y-description`

### Database Schema Changes
- **ALWAYS create migration scripts** for schema changes
- **ALWAYS test migrations** with existing seed data
- **ALWAYS update TypeScript types** when schema changes
- **ALWAYS validate relationships** between new and existing entities
- **ALWAYS backup production data** before schema migrations

### API Design Standards
- **ALWAYS follow RESTful conventions** for new endpoints
- **ALWAYS include proper error responses** with status codes
- **ALWAYS validate request payloads** using Zod or similar
- **ALWAYS include response type definitions** in TypeScript
- **ALWAYS test API endpoints** with both valid and invalid data
- **ALWAYS implement tenant isolation** for multi-tenant APIs using organizationId
- **ALWAYS validate organizationId matching** between user and accessed resources
- **ALWAYS test cross-tenant access prevention** in API routes

### Sprint Progress Tracking
- **BEFORE starting** a story: Update status to "IN PROGRESS" in execution plan
- **DURING development**: Update GitHub issue with progress comments
- **WHEN blocked**: Document blockers in both GitHub issue and execution plan
- **UPON completion**: Mark story as ✅ in execution plan and close GitHub issue
- **AT sprint end**: Update velocity metrics and conduct retrospective

### Story Completion Validation
- **ALWAYS verify** all acceptance criteria are met before marking complete
- **ALWAYS run** full test suite before story completion
- **ALWAYS update** any affected documentation
- **ALWAYS demo** completed functionality to product owner
- **ALWAYS check** story points accuracy for future sprint planning

### Expert Consultation Framework
- **BEFORE major decisions**: Consult relevant expert profile guidance from EXPERT_PROFILES_SYSTEM.md
- **DURING implementation**: Follow expert quality gates and decision frameworks
- **AFTER completion**: Validate against expert quality criteria
- **FOR conflicts**: Use expert hierarchy and escalation paths defined in profiles
- **FOR architecture**: Technical Architect + AI Architect + Security Architect review required
- **FOR design**: UX Strategist + UI Designer + Accessibility Specialist validation needed
- **FOR business logic**: Product Manager + Business Analyst + Requirements Engineer approval

### Background Automation Framework
- **ALWAYS trigger** relevant background agents on file changes
- **ALWAYS validate** agent outputs against expert profiles
- **ALWAYS update** sprint progress automatically via agents
- **ALWAYS escalate** critical issues immediately through automation
- **ALWAYS maintain** automation logs for debugging and optimization
- **BEFORE commits**: Run code quality and security agents
- **DURING development**: Continuous testing and documentation agents active
- **AFTER merges**: Deployment and monitoring agents execute
- **ON schedule**: Performance and security scanning agents run

## AI-Driven Development Framework

### Core AI Agents
- **AI Project Orchestrator**: Lead agent for sprint management, epic tracking, and team coordination
- **AI Architecture Governance**: Technical oversight and best practices enforcement  
- **AI Process Optimization**: Workflow optimization and efficiency tracking
- **AI Documentation & Context**: Documentation management and context preservation
- **AI Quality Assurance**: Quality gates enforcement and expert validation

### Chat Length Management
- **ALWAYS monitor** chat token usage with automated tracking
- **WARNING at 70%**: Begin preparing for context transition
- **CRITICAL at 85%**: Immediately generate handoff document and transition
- **PRESERVE context** through comprehensive handoff documentation
- **SEAMLESS transitions** with detailed next-session instructions

### Expert-Driven Decisions
- **BEFORE major decisions**: Consult AI agents with expert profile integration
- **DURING implementation**: Follow expert quality gates and decision frameworks
- **AFTER completion**: Validate against expert quality criteria through AI validation
- **FOR conflicts**: Use expert hierarchy and AI-assisted escalation paths
- **CONTINUOUS learning**: Capture and apply expert insights via AI agents

### AI Sprint Management
- **AUTO-CREATE** GitHub issues from conversation requirements
- **REAL-TIME tracking** of sprint progress via AI Project Orchestrator
- **AUTOMATED updates** to sprint execution plans and velocity calculations
- **PROACTIVE identification** of blockers and impediments
- **INTELLIGENT estimation** of story points and timeline adjustments

## Repository Health Monitoring - NEW MANDATORY SECTION

### Daily Health Checks
Run these commands daily to maintain repository health:
```bash
# Repository health assessment
git status                           # Must be clean
npx tsc --noEmit | wc -l            # Must be 0 TypeScript errors
npm test 2>&1 | grep -c "FAIL"      # Must be 0 failing tests
npm run lint 2>&1 | grep -c "error" # Must be 0 lint errors
gh pr list --state=open             # Review open PRs
git branch --merged main             # Clean up merged branches
```

### Weekly Repository Maintenance
```bash
# Dependency health
npm audit                           # Check for vulnerabilities
npm outdated                        # Check for outdated packages
npx prisma validate                 # Validate database schema
docker-compose ps                   # Check service health
```

### Quality Thresholds - STRICT ENFORCEMENT
- **TypeScript Errors**: 0 allowed in main branch
- **Test Coverage**: Minimum 70% required
- **Lint Errors**: 0 allowed in any PR
- **Build Failures**: 0 tolerance for broken builds
- **Open PRs**: Maximum 5 at any time
- **Stale Branches**: Delete after 7 days if unmerged

### Automated Monitoring Triggers
- **Pre-commit**: Run TypeScript, lint, test validation
- **Pre-push**: Ensure all quality gates pass
- **PR Creation**: Automatic CI/CD validation
- **Main Branch**: Protected with required status checks
- **Daily**: Automated dependency and security scanning

## Enforcement - ZERO TOLERANCE POLICY

If any of these rules are violated:
1. **STOP current work IMMEDIATELY**
2. **FIX the violation** before any new work
3. **DOCUMENT the fix** in detailed commit message
4. **REVIEW process** to prevent recurrence
5. **UPDATE .cursorrules** if new patterns emerge

### Violation Consequences
- **Direct main commits**: Immediate revert and process review
- **Bypassing checks**: PR rejection and re-work required
- **TypeScript errors >5**: Mandatory cleanup PR first
- **Test failures**: No new features until tests pass
- **Missing environment setup**: Document and configure immediately

These rules are mandatory for maintaining professional, scalable, and reliable development practices.