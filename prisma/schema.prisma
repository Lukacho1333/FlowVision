generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                @id @default(cuid())
  organizationId           String
  email                    String                @unique
  passwordHash             String
  role                     Role                  @default(LEADER)
  name                     String?
  image                    String?
  emailVerified            DateTime?
  preferences              Json?
  aiTier                   String                @default("basic")
  createdAt                DateTime              @default(now())
  updatedAt                DateTime              @updatedAt
  aiConfigurations         AIConfiguration[]
  aiFeedback               AIQualityFeedback[]
  aiUsageLogs              AIUsageLog[]
  aiQuota                  AIUserQuota?
  accounts                 Account[]
  attachments              Attachment[]
  auditLogs                AuditLog[]
  businessProfile          BusinessProfile?
  comments                 Comment[]
  ideas                    Idea[]
  initiatives              Initiative[]          @relation("UserInitiatives")
  assignedSolutions        InitiativeSolution[]  @relation("AssignedSolutions")
  assignedIssueSolutions   Solution[]            @relation("AssignedIssueSolutions")
  Issue                    Issue[]
  approvedRequirementCards RequirementCard[]     @relation("ApprovedRequirementCards")
  assignedRequirementCards RequirementCard[]     @relation("UserRequirementCards")
  createdRequirementCards  RequirementCard[]     @relation("CreatedRequirementCards")
  sessions                 Session[]
  assignedTasks            SolutionTask[]        @relation("AssignedTasks")
  organizations            organizations         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  votes                    Vote[]
  systemConfigUpdates      SystemConfiguration[] @relation("SystemConfigUpdatedBy")
  usage_logs               usage_logs[]

  @@index([email])
  @@index([organizationId, email])
  @@index([organizationId, role, createdAt])
}

model BusinessProfile {
  id             String        @id @default(cuid())
  organizationId String
  userId         String        @unique
  industry       String
  size           Int
  metrics        Json
  organizations  organizations @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id])

  @@index([organizationId])
}

model Initiative {
  id                 String               @id @default(cuid())
  title              String
  problem            String
  goal               String
  kpis               String[]
  requirements       String[]             @default([])
  acceptanceCriteria String[]             @default([])
  ownerId            String
  timelineStart      DateTime?
  timelineEnd        DateTime?
  status             String
  progress           Int                  @default(0)
  difficulty         Int?
  roi                Int?
  priorityScore      Int?
  orderIndex         Int                  @default(0)
  budget             Int?
  estimatedHours     Int?
  actualHours        Int?
  phase              String?              @default("planning")
  type               String?              @default("Process Improvement")
  clusterId          String?
  crossImpact        Json?
  clusterMetrics     Json?
  sourceCategory     String?
  aiAnalysisContext  Json?
  aiConfidence       Int?
  aiGeneratedAt      DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  organizationId     String?
  attachments        Attachment[]
  comments           Comment[]
  ideas              Idea[]
  cluster            IssueCluster?        @relation("ClusterInitiatives", fields: [clusterId], references: [id])
  organizations      organizations?       @relation(fields: [organizationId], references: [id])
  owner              User                 @relation("UserInitiatives", fields: [ownerId], references: [id])
  solutions          InitiativeSolution[] @relation("InitiativeSolutions")
  issueSolutions     Solution[]
  milestones         Milestone[]
  requirementCards   RequirementCard[]
  assignments        ResourceAssignment[]
  votes              Vote[]
  Initiative_A       Initiative[]         @relation("InitiativeDependencies")
  Initiative_B       Initiative[]         @relation("InitiativeDependencies")
  addressedIssues    Issue[]              @relation("IssueInitiatives")
}

model RequirementCard {
  id             String         @id @default(cuid())
  initiativeId   String
  type           String         @default("BUSINESS")
  title          String
  description    String
  priority       String         @default("MEDIUM")
  status         String         @default("DRAFT")
  category       String?
  assignedToId   String?
  createdById    String
  approvedById   String?
  approvedAt     DateTime?
  orderIndex     Int            @default(0)
  aiGenerated    Boolean        @default(false)
  sourceType     String?
  sourceId       String?
  aiConfidence   Int?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  organizationId String?
  comments       Comment[]
  approvedBy     User?          @relation("ApprovedRequirementCards", fields: [approvedById], references: [id])
  assignedTo     User?          @relation("UserRequirementCards", fields: [assignedToId], references: [id])
  createdBy      User           @relation("CreatedRequirementCards", fields: [createdById], references: [id])
  initiative     Initiative     @relation(fields: [initiativeId], references: [id], onDelete: Cascade)
  organizations  organizations? @relation(fields: [organizationId], references: [id])
}

model Team {
  id             String               @id @default(cuid())
  name           String
  department     String?
  capacity       Int                  @default(40)
  skills         String[]
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  organizationId String?
  assignments    ResourceAssignment[]
  organizations  organizations?       @relation(fields: [organizationId], references: [id])
}

model Milestone {
  id             String         @id @default(cuid())
  title          String
  description    String?
  dueDate        DateTime
  status         String         @default("pending")
  initiativeId   String
  progress       Int            @default(0)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  organizationId String?
  comments       Comment[]
  initiative     Initiative     @relation(fields: [initiativeId], references: [id], onDelete: Cascade)
  organizations  organizations? @relation(fields: [organizationId], references: [id])
}

model ResourceAssignment {
  id             String         @id @default(cuid())
  initiativeId   String
  teamId         String
  hoursAllocated Int            @default(0)
  startDate      DateTime?
  endDate        DateTime?
  role           String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  organizationId String?
  initiative     Initiative     @relation(fields: [initiativeId], references: [id], onDelete: Cascade)
  organizations  organizations? @relation(fields: [organizationId], references: [id])
  team           Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([initiativeId, teamId])
}

model Issue {
  id                   String              @id @default(cuid())
  organizationId       String
  description          String
  authorId             String
  votes                Int                 @default(0)
  heatmapScore         Int                 @default(0)
  department           String?
  category             String?
  status               String              @default("OPEN")
  clusterId            String?
  similarity           Json?
  keywords             String[]            @default([])
  crossImpact          Json?
  aiSummary            String?
  aiConfidence         Int?
  aiGeneratedAt        DateTime?
  aiVersion            String?
  aiAnalysisDetails    Json?
  businessAreaId       String?
  departmentId         String?
  impactTypeId         String?
  qualityScore         Int?
  completenessScore    Int?
  validationDetails    Json?
  categorySuggestionId String?
  categoryConfidence   Int?
  suggestionMetadata   Json?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @default(now()) @updatedAt
  comments             Comment[]
  User                 User                @relation(fields: [authorId], references: [id])
  businessArea         SystemCategory?     @relation("IssueBusinessArea", fields: [businessAreaId], references: [id])
  cluster              IssueCluster?       @relation(fields: [clusterId], references: [id])
  departmentCategory   SystemCategory?     @relation("IssueDepartment", fields: [departmentId], references: [id])
  impactType           SystemCategory?     @relation("IssueImpactType", fields: [impactTypeId], references: [id])
  organizations        organizations       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  systemImpacts        IssueSystemImpact[]
  userVotes            Vote[]
  initiatives          Initiative[]        @relation("IssueInitiatives")
  solutions            Solution[]

  @@index([organizationId, authorId])
  @@index([organizationId, clusterId])
  @@index([organizationId, createdAt])
  @@index([organizationId, status, category])
  @@index([organizationId, status, createdAt])
  @@index([organizationId, votes, heatmapScore])
}

model IssueCluster {
  id                String         @id @default(cuid())
  name              String
  description       String
  category          String
  severity          String         @default("medium")
  theme             String
  keywords          String[]       @default([])
  issueCount        Int            @default(0)
  rootCauses        Json?
  impactAnalysis    Json?
  metrics           Json?
  aiSummary         String?
  aiInsights        Json?
  aiConfidence      Int?
  aiGeneratedAt     DateTime?
  aiVersion         String?
  aiAnalysisDetails Json?
  color             String         @default("#3B82F6")
  isActive          Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  organizationId    String?
  initiatives       Initiative[]   @relation("ClusterInitiatives")
  issues            Issue[]
  organizations     organizations? @relation(fields: [organizationId], references: [id])
}

model Comment {
  id                String           @id @default(cuid())
  content           String
  authorId          String
  initiativeId      String?
  issueId           String?
  ideaId            String?
  milestoneId       String?
  requirementCardId String?
  parentId          String?
  mentions          String[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  organizationId    String?
  author            User             @relation(fields: [authorId], references: [id])
  idea              Idea?            @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  initiative        Initiative?      @relation(fields: [initiativeId], references: [id], onDelete: Cascade)
  issue             Issue?           @relation(fields: [issueId], references: [id], onDelete: Cascade)
  milestone         Milestone?       @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  organizations     organizations?   @relation(fields: [organizationId], references: [id])
  parentComment     Comment?         @relation("CommentReplies", fields: [parentId], references: [id])
  replies           Comment[]        @relation("CommentReplies")
  requirementCard   RequirementCard? @relation(fields: [requirementCardId], references: [id], onDelete: Cascade)
}

model Idea {
  id             String         @id @default(cuid())
  title          String
  description    String
  authorId       String
  category       String         @default("general")
  priority       String         @default("medium")
  status         String         @default("idea")
  votes          Int            @default(0)
  tags           String[]
  assignedTo     String?
  dueDate        DateTime?
  initiativeId   String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  organizationId String?
  comments       Comment[]
  author         User           @relation(fields: [authorId], references: [id])
  initiative     Initiative?    @relation(fields: [initiativeId], references: [id])
  organizations  organizations? @relation(fields: [organizationId], references: [id])
  userVotes      Vote[]
}

model Vote {
  id             String         @id @default(cuid())
  userId         String
  initiativeId   String?
  ideaId         String?
  issueId        String?
  type           String
  value          Int            @default(1)
  createdAt      DateTime       @default(now())
  organizationId String?
  idea           Idea?          @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  initiative     Initiative?    @relation(fields: [initiativeId], references: [id], onDelete: Cascade)
  issue          Issue?         @relation(fields: [issueId], references: [id], onDelete: Cascade)
  organizations  organizations? @relation(fields: [organizationId], references: [id])
  user           User           @relation(fields: [userId], references: [id])

  @@unique([userId, initiativeId])
  @@unique([userId, ideaId])
  @@unique([userId, issueId])
}

model AuditLog {
  id             String         @id @default(cuid())
  userId         String?
  action         String
  details        Json
  timestamp      DateTime       @default(now())
  ipAddress      String?
  userAgent      String?
  organizationId String?
  organizations  organizations? @relation(fields: [organizationId], references: [id])
  user           User?          @relation(fields: [userId], references: [id])
}

model Attachment {
  id             String         @id @default(cuid())
  filename       String
  filepath       String
  mimetype       String
  size           Int
  initiativeId   String
  uploadedById   String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  organizationId String?
  initiative     Initiative     @relation(fields: [initiativeId], references: [id], onDelete: Cascade)
  organizations  organizations? @relation(fields: [organizationId], references: [id])
  uploadedBy     User           @relation(fields: [uploadedById], references: [id])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AIUsageLog {
  id           String              @id @default(cuid())
  requestId    String
  userId       String
  operation    String
  inputTokens  Int                 @default(0)
  outputTokens Int                 @default(0)
  totalTokens  Int                 @default(0)
  cost         Float               @default(0)
  latency      Int                 @default(0)
  cacheHit     Boolean             @default(false)
  modelUsed    String              @default("gpt-3.5-turbo")
  quality      Int                 @default(100)
  timestamp    DateTime            @default(now())
  metadata     Json?
  feedback     AIQualityFeedback[]
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp])
  @@index([operation, timestamp])
  @@index([modelUsed, timestamp])
}

model AIUserQuota {
  id                String   @id @default(cuid())
  userId            String   @unique
  tier              String   @default("basic")
  dailyTokenLimit   Int      @default(10000)
  monthlyTokenLimit Int      @default(250000)
  dailyUsedTokens   Int      @default(0)
  monthlyUsedTokens Int      @default(0)
  dailyCost         Float    @default(0)
  monthlyCost       Float    @default(0)
  lastResetDaily    DateTime @default(now())
  lastResetMonthly  DateTime @default(now())
  isBlocked         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AIPerformanceMetric {
  id           String   @id @default(cuid())
  operation    String
  model        String
  avgLatency   Int      @default(0)
  avgCost      Float    @default(0)
  avgQuality   Int      @default(100)
  successRate  Float    @default(1.0)
  cacheHitRate Float    @default(0.0)
  requestCount Int      @default(0)
  totalTokens  Int      @default(0)
  date         DateTime
  createdAt    DateTime @default(now())

  @@unique([operation, model, date])
  @@index([date])
}

model AICacheEntry {
  id         String   @id @default(cuid())
  cacheKey   String   @unique
  operation  String
  prompt     String
  response   Json
  quality    Int      @default(100)
  hitCount   Int      @default(0)
  modelUsed  String
  tokenCount Int      @default(0)
  cost       Float    @default(0)
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  lastUsed   DateTime @default(now())

  @@index([operation])
  @@index([expiresAt])
}

model AIConfiguration {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  description String?
  isActive    Boolean  @default(true)
  updatedBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  updatedUser User     @relation(fields: [updatedBy], references: [id])
}

model AIQualityFeedback {
  id             String     @id @default(cuid())
  usageLogId     String
  userId         String
  rating         Int
  feedback       String?
  isHelpful      Boolean?
  reportedIssues String[]
  createdAt      DateTime   @default(now())
  usageLog       AIUsageLog @relation(fields: [usageLogId], references: [id], onDelete: Cascade)
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AIClientModel {
  id                    String   @id @default(cuid())
  organizationId        String   @unique
  modelData             Json     // Encrypted client-specific learning data
  learningData          Json?    // Additional learning data structure
  confidenceThreshold   Float    @default(0.7)
  learningEnabled       Boolean  @default(true)
  lastTraining          DateTime? // Alias for lastTrainingAt
  lastTrainingAt        DateTime?
  totalFeedbackCount    Int      @default(0)
  positiveeFeedbackRate Float    @default(0.0)
  version               String   @default("1.0")
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  organizations         organizations @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  feedback              AIRecommendationFeedback[]

  @@index([organizationId, isActive])
  @@index([lastTrainingAt])
}

model AIRecommendationFeedback {
  id                String        @id @default(cuid())
  organizationId    String
  recommendationId  String
  recommendationType String       // 'priority_score', 'categorization', 'solution_suggestion', etc.
  accepted          Boolean
  confidence        Float
  feedback          String?
  userId            String
  metadata          Json?
  timestamp         DateTime      @default(now()) // Alias for createdAt
  createdAt         DateTime      @default(now())
  clientModel       AIClientModel @relation(fields: [organizationId], references: [organizationId], onDelete: Cascade, map: "AIRecommendationFeedback_clientModel_fkey")
  organizations     organizations @relation(fields: [organizationId], references: [id], onDelete: Cascade, map: "AIRecommendationFeedback_organization_fkey")

  @@index([organizationId, recommendationType])
  @@index([accepted, createdAt])
  @@index([timestamp])
  @@index([recommendationId])
}

model Solution {
  id               String   @id @default(cuid())
  title            String
  description      String
  status           String   @default("DRAFT")
  organizationId   String
  issueId          String?
  initiativeId     String?
  assignedToId     String?
  estimatedCost    Float?
  estimatedHours   Int?
  priority         Int      @default(0)
  isAIGenerated    Boolean  @default(false)
  aiConfidence     Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  organizations    organizations @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  issue            Issue?   @relation(fields: [issueId], references: [id])
  initiative       Initiative? @relation(fields: [initiativeId], references: [id])
  assignedTo       User?    @relation("AssignedIssueSolutions", fields: [assignedToId], references: [id])

  @@index([organizationId, status])
  @@index([issueId])
  @@index([initiativeId])
}

model InitiativeSolution {
  id                   String               @id @default(cuid())
  initiativeId         String
  title                String
  description          String
  type                 SolutionType
  priority             Int                  @default(0)
  status               SolutionStatus       @default(DRAFT)
  estimatedCost        Float?
  estimatedHours       Int?
  actualCost           Float?
  actualHours          Int?
  plannedStartDate     DateTime?
  plannedEndDate       DateTime?
  actualStartDate      DateTime?
  actualEndDate        DateTime?
  assignedToId         String?
  isAIGenerated        Boolean              @default(false)
  aiConfidence         Int?
  aiReasoning          String?
  sourceType           String?
  sourceId             String?
  progress             Int                  @default(0)
  isValidated          Boolean              @default(false)
  validatedBy          String?
  validatedAt          DateTime?
  tags                 String[]             @default([])
  notes                String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  organizationId       String?
  assignedTo           User?                @relation("AssignedSolutions", fields: [assignedToId], references: [id])
  initiative           Initiative           @relation("InitiativeSolutions", fields: [initiativeId], references: [id], onDelete: Cascade)
  organizations        organizations?       @relation(fields: [organizationId], references: [id])
  tasks                SolutionTask[]
  InitiativeSolution_A InitiativeSolution[] @relation("SolutionDependencies")
  InitiativeSolution_B InitiativeSolution[] @relation("SolutionDependencies")

  @@index([initiativeId, status])
  @@index([assignedToId])
  @@index([type, status])
  @@index([priority])
}

model SolutionTask {
  id             String             @id @default(cuid())
  solutionId     String
  title          String
  description    String?
  assignedToId   String?
  status         TaskStatus         @default(TODO)
  priority       Int                @default(0)
  estimatedHours Int?
  actualHours    Int?
  dueDate        DateTime?
  completedAt    DateTime?
  isAIGenerated  Boolean            @default(false)
  aiConfidence   Int?
  aiReasoning    String?
  progress       Int                @default(0)
  tags           String[]           @default([])
  notes          String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  organizationId String?
  assignedTo     User?              @relation("AssignedTasks", fields: [assignedToId], references: [id])
  organizations  organizations?     @relation(fields: [organizationId], references: [id])
  solution       InitiativeSolution @relation(fields: [solutionId], references: [id], onDelete: Cascade)
  SolutionTask_A SolutionTask[]     @relation("TaskDependencies")
  SolutionTask_B SolutionTask[]     @relation("TaskDependencies")

  @@index([solutionId, status])
  @@index([assignedToId])
  @@index([status, dueDate])
  @@index([priority])
}

model IssueSystemImpact {
  id               String         @id @default(cuid())
  issueId          String
  systemCategoryId String
  impactLevel      ImpactLevel
  description      String?
  isAIGenerated    Boolean        @default(false)
  aiConfidence     Int?
  aiReasoning      String?
  isValidated      Boolean        @default(false)
  validatedBy      String?
  validatedAt      DateTime?
  priority         Int            @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  issue            Issue          @relation(fields: [issueId], references: [id], onDelete: Cascade)
  systemCategory   SystemCategory @relation(fields: [systemCategoryId], references: [id], onDelete: Cascade)

  @@unique([issueId, systemCategoryId])
  @@index([impactLevel])
  @@index([isAIGenerated])
  @@index([isValidated])
}

model SystemCategory {
  id                 String              @id @default(cuid())
  name               String
  description        String?
  type               SystemType
  industry           String?
  isDefault          Boolean             @default(false)
  isActive           Boolean             @default(true)
  parentId           String?
  organizationId     String?
  tags               String[]            @default([])
  iconUrl            String?
  color              String?
  usageCount         Int                 @default(0)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  issueBusinessAreas Issue[]             @relation("IssueBusinessArea")
  issueDepartments   Issue[]             @relation("IssueDepartment")
  issueImpactTypes   Issue[]             @relation("IssueImpactType")
  issueImpacts       IssueSystemImpact[]
  organizations      organizations?      @relation(fields: [organizationId], references: [id])
  parent             SystemCategory?     @relation("SystemHierarchy", fields: [parentId], references: [id])
  children           SystemCategory[]    @relation("SystemHierarchy")

  @@unique([name, type, organizationId])
  @@index([type, isActive])
  @@index([parentId])
  @@index([organizationId])
}

model SystemConfiguration {
  id          String   @id @default(cuid())
  category    String
  key         String
  value       Json
  dataType    String
  description String?
  environment String   @default("production")
  scope       String   @default("global")
  isActive    Boolean  @default(true)
  version     Int      @default(1)
  tags        String[] @default([])
  validation  Json?
  constraints Json?
  updatedBy   String?
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
  updatedUser User?    @relation("SystemConfigUpdatedBy", fields: [updatedBy], references: [id])

  @@unique([category, key, environment, scope])
  @@index([category, isActive])
  @@index([environment, scope])
  @@index([updatedAt])
  @@map("system_configurations")
}

model organizations {
  id                       String                     @id
  name                     String
  slug                     String                     @unique
  domain                   String?                    @unique
  planTier                 PlanTier                   @default(PROFESSIONAL)
  settings                 Json                       @default("{}")
  isActive                 Boolean                    @default(true)
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime
  Attachment               Attachment[]
  AuditLog                 AuditLog[]
  BusinessProfile          BusinessProfile[]
  Comment                  Comment[]
  Idea                     Idea[]
  Initiative               Initiative[]
  InitiativeSolution       InitiativeSolution[]
  Issue                    Issue[]
  IssueCluster             IssueCluster[]
  Milestone                Milestone[]
  RequirementCard          RequirementCard[]
  ResourceAssignment       ResourceAssignment[]
  SolutionTask             SolutionTask[]
  SystemCategory           SystemCategory[]
  Team                     Team[]
  User                     User[]
  Vote                     Vote[]
  usage_logs               usage_logs[]
  aiClientModel            AIClientModel?
  aiRecommendationFeedback AIRecommendationFeedback[]
  Solution                 Solution[]

  @@index([planTier, isActive])
  @@index([slug])
}

model usage_logs {
  id             String        @id
  organizationId String
  userId         String?
  endpoint       String
  method         String
  requestSize    Int           @default(0)
  responseSize   Int           @default(0)
  duration       Int           @default(0)
  timestamp      DateTime      @default(now())
  organizations  organizations @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  User           User?         @relation(fields: [userId], references: [id])

  @@index([endpoint, timestamp])
  @@index([organizationId, timestamp])
}

enum Role {
  ADMIN
  LEADER
  VIEWER
}

enum SolutionType {
  TECHNOLOGY
  PROCESS
  TRAINING
  POLICY
}

enum SolutionStatus {
  DRAFT
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ImpactLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SystemType {
  TECHNOLOGY
  PROCESS
  PEOPLE
}

enum PlanTier {
  STARTER
  PROFESSIONAL
  ENTERPRISE
  CUSTOM
}
