name: Compliance Monitoring

on:
  schedule:
    # Run daily at 9 AM UTC
    - cron: '0 9 * * *'
  workflow_dispatch: # Allow manual trigger
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  compliance-check:
    name: Repository Compliance Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 50 # Get recent commit history

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check commit message compliance
        id: commit-check
        run: |
          echo "::group::Checking commit message format"
          COMPLIANCE_SCORE=0
          TOTAL_COMMITS=0

          # Check last 20 commits on main branch
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            COMMITS=$(git log --oneline -20 --pretty=format:"%s")
          else
            # For PRs, check commits in the PR
            COMMITS=$(git log --oneline --pretty=format:"%s" origin/main..HEAD)
          fi

          while IFS= read -r commit_msg; do
            if [ ! -z "$commit_msg" ]; then
              TOTAL_COMMITS=$((TOTAL_COMMITS + 1))
              if echo "$commit_msg" | grep -qE '^(feat|fix|docs|style|refactor|perf|test|chore)(\(.+\))?: .+'; then
                COMPLIANCE_SCORE=$((COMPLIANCE_SCORE + 1))
              else
                echo "‚ùå Non-conventional commit: $commit_msg"
              fi
            fi
          done <<< "$COMMITS"

          if [ $TOTAL_COMMITS -gt 0 ]; then
            COMPLIANCE_PERCENT=$((COMPLIANCE_SCORE * 100 / TOTAL_COMMITS))
          else
            COMPLIANCE_PERCENT=100
          fi

          echo "compliance_score=$COMPLIANCE_SCORE" >> $GITHUB_OUTPUT
          echo "total_commits=$TOTAL_COMMITS" >> $GITHUB_OUTPUT
          echo "compliance_percent=$COMPLIANCE_PERCENT" >> $GITHUB_OUTPUT

          echo "üìä Commit Compliance: $COMPLIANCE_SCORE/$TOTAL_COMMITS ($COMPLIANCE_PERCENT%)"
          echo "::endgroup::"

      - name: Check code quality issues
        id: quality-check
        run: |
          echo "::group::Checking code quality"
          ISSUES_FOUND=0

          # Check for TODO comments in production code
          if grep -r "TODO\|FIXME\|XXX" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" app/ lib/ components/ 2>/dev/null; then
            echo "‚ö†Ô∏è TODO comments found in production code"
            ISSUES_FOUND=$((ISSUES_FOUND + 1))
          fi

          # Check for console.log statements
          if grep -r "console\.log" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" app/ lib/ components/ 2>/dev/null; then
            echo "‚ö†Ô∏è console.log statements found"
            ISSUES_FOUND=$((ISSUES_FOUND + 1))
          fi

          # Check for potential hardcoded secrets (excluding env references)
          if grep -r -i "api_key\|secret\|password\|token" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" app/ lib/ components/ 2>/dev/null | grep -v "process.env" | grep -v "type\|interface\|const.*=.*'.*'" | head -5; then
            echo "‚ö†Ô∏è Potential hardcoded secrets found"
            ISSUES_FOUND=$((ISSUES_FOUND + 1))
          fi

          echo "quality_issues=$ISSUES_FOUND" >> $GITHUB_OUTPUT
          echo "üìä Quality Issues Found: $ISSUES_FOUND"
          echo "::endgroup::"

      - name: Run security scan
        id: security-check
        continue-on-error: true
        run: |
          echo "::group::Security scan"
          npm audit --audit-level=moderate --json > audit-results.json || true

          # Count vulnerabilities
          VULNERABILITIES=$(cat audit-results.json | jq '.metadata.vulnerabilities | .moderate + .high + .critical' 2>/dev/null || echo "0")
          echo "security_vulnerabilities=$VULNERABILITIES" >> $GITHUB_OUTPUT
          echo "üìä Security Vulnerabilities: $VULNERABILITIES"
          echo "::endgroup::"

      - name: Generate compliance report
        id: report
        run: |
          echo "::group::Generating compliance report"

          # Calculate overall compliance score
          COMMIT_COMPLIANCE=${{ steps.commit-check.outputs.compliance_percent }}
          QUALITY_ISSUES=${{ steps.quality-check.outputs.quality_issues }}
          SECURITY_ISSUES=${{ steps.security-check.outputs.security_vulnerabilities }}

          # Quality score (inverted - fewer issues = higher score)
          if [ $QUALITY_ISSUES -eq 0 ]; then
            QUALITY_SCORE=100
          elif [ $QUALITY_ISSUES -le 2 ]; then
            QUALITY_SCORE=80
          elif [ $QUALITY_ISSUES -le 5 ]; then
            QUALITY_SCORE=60
          else
            QUALITY_SCORE=40
          fi

          # Security score
          if [ $SECURITY_ISSUES -eq 0 ]; then
            SECURITY_SCORE=100
          elif [ $SECURITY_ISSUES -le 2 ]; then
            SECURITY_SCORE=75
          elif [ $SECURITY_ISSUES -le 5 ]; then
            SECURITY_SCORE=50
          else
            SECURITY_SCORE=25
          fi

          # Overall compliance (weighted average)
          OVERALL_COMPLIANCE=$(( (COMMIT_COMPLIANCE * 40 + QUALITY_SCORE * 35 + SECURITY_SCORE * 25) / 100 ))

          echo "overall_compliance=$OVERALL_COMPLIANCE" >> $GITHUB_OUTPUT
          echo "quality_score=$QUALITY_SCORE" >> $GITHUB_OUTPUT
          echo "security_score=$SECURITY_SCORE" >> $GITHUB_OUTPUT

          # Create report
          cat > compliance-report.md << EOF
          # üìä Compliance Report

          **Generated**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Branch**: ${{ github.ref_name }}
          **Commit**: ${{ github.sha }}

          ## üéØ Overall Compliance Score: ${OVERALL_COMPLIANCE}%

          ### üìù Commit Message Compliance: ${COMMIT_COMPLIANCE}%
          - Checked: ${{ steps.commit-check.outputs.total_commits }} commits
          - Compliant: ${{ steps.commit-check.outputs.compliance_score }} commits

          ### üîç Code Quality Score: ${QUALITY_SCORE}%
          - Issues Found: ${QUALITY_ISSUES}

          ### üîí Security Score: ${SECURITY_SCORE}%
          - Vulnerabilities: ${SECURITY_ISSUES}

          ## üìà Trend Analysis
          - Target Compliance: ‚â•95%
          - Current Status: $([ $OVERALL_COMPLIANCE -ge 95 ] && echo "‚úÖ PASSING" || echo "‚ùå NEEDS IMPROVEMENT")

          ## üéØ Action Items
          $([ $COMMIT_COMPLIANCE -lt 90 ] && echo "- üìù Improve commit message format compliance")
          $([ $QUALITY_ISSUES -gt 0 ] && echo "- üîß Address code quality issues")
          $([ $SECURITY_ISSUES -gt 0 ] && echo "- üîí Resolve security vulnerabilities")
          EOF

          echo "üìä Overall Compliance: $OVERALL_COMPLIANCE%"
          echo "::endgroup::"

      - name: Save compliance metrics
        run: |
          # Create metrics directory
          mkdir -p metrics

          # Save detailed metrics
          cat > metrics/compliance-$(date +%Y-%m-%d).json << EOF
          {
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "branch": "${{ github.ref_name }}",
            "commit": "${{ github.sha }}",
            "metrics": {
              "overall_compliance": ${{ steps.report.outputs.overall_compliance }},
              "commit_compliance": ${{ steps.commit-check.outputs.compliance_percent }},
              "quality_score": ${{ steps.report.outputs.quality_score }},
              "security_score": ${{ steps.report.outputs.security_score }},
              "commit_count": ${{ steps.commit-check.outputs.total_commits }},
              "quality_issues": ${{ steps.quality-check.outputs.quality_issues }},
              "security_vulnerabilities": ${{ steps.security-check.outputs.security_vulnerabilities }}
            }
          }
          EOF

      - name: Upload compliance report
        uses: actions/upload-artifact@v4
        with:
          name: compliance-report-${{ github.run_number }}
          path: |
            compliance-report.md
            metrics/
          retention-days: 30

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('compliance-report.md', 'utf8');
            const overallCompliance = ${{ steps.report.outputs.overall_compliance }};

            const emoji = overallCompliance >= 95 ? 'üéâ' : overallCompliance >= 80 ? '‚ö†Ô∏è' : 'üö®';
            const status = overallCompliance >= 95 ? 'Excellent' : overallCompliance >= 80 ? 'Good' : 'Needs Improvement';

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${emoji} **Compliance Check: ${status} (${overallCompliance}%)**\n\n${report}`
            });

      - name: Create issue for low compliance
        if: github.ref == 'refs/heads/main' && steps.report.outputs.overall_compliance < 80
        uses: actions/github-script@v7
        with:
          script: |
            const compliance = ${{ steps.report.outputs.overall_compliance }};
            const report = require('fs').readFileSync('compliance-report.md', 'utf8');

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Repository Compliance Below Target (${compliance}%)`,
              body: `Repository compliance has dropped below the 80% threshold.\n\n${report}\n\n**Action Required**: Please review and address the compliance issues listed above.`,
              labels: ['compliance', 'priority-high']
            });

      - name: Fail workflow if compliance is critical
        if: steps.report.outputs.overall_compliance < 60
        run: |
          echo "üö® Critical compliance failure: ${{ steps.report.outputs.overall_compliance }}%"
          echo "Repository compliance is critically low. Please address issues immediately."
          exit 1
