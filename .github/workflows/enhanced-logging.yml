name: Enhanced Logging & Monitoring

on:
  push:
    branches: [main, 'feature/*']
  pull_request:
    branches: [main]
  workflow_run:
    workflows: ['CI/CD Pipeline']
    types: [completed]

env:
  LOG_LEVEL: DEBUG
  LOG_CONTEXTS: github,testing,api,auth,ai,ci
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  detailed-logging:
    name: Detailed CI/CD Logging
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          echo "üì¶ Installing dependencies with detailed logging..."
          npm ci --verbose
          echo "‚úÖ Dependencies installed successfully"

      - name: Setup environment logging
        run: |
          echo "üîß Environment Setup Logging"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Git commit: ${{ github.sha }}"
          echo "Git ref: ${{ github.ref }}"
          echo "Event: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          echo "Working directory: $(pwd)"
          echo "Available space: $(df -h)"
          echo "Memory: $(free -h)"

      - name: Detailed lint analysis
        run: |
          echo "üîç Running detailed lint analysis..."
          # Create a comprehensive lint report
          npm run lint 2>&1 | tee lint-output.log || true

          # Check if lint output contains errors
          if grep -q "error" lint-output.log; then
            echo "‚ùå Linting errors found:"
            cat lint-output.log
            echo "::error::Linting failed - see details above"
          else
            echo "‚úÖ No linting errors found"
          fi

      - name: Detailed TypeScript analysis
        run: |
          echo "üîç Running detailed TypeScript analysis..."
          npx tsc --noEmit --listFiles --extendedDiagnostics 2>&1 | tee typescript-output.log || true

          # Check for TypeScript errors
          if grep -q "error TS" typescript-output.log; then
            echo "‚ùå TypeScript errors found:"
            grep "error TS" typescript-output.log
            echo "::error::TypeScript compilation failed"
          else
            echo "‚úÖ TypeScript compilation successful"
          fi

      - name: Detailed test analysis
        run: |
          echo "üß™ Running detailed test analysis..."
          npm test -- --verbose --coverage --coverageReporters=text-lcov 2>&1 | tee test-output.log || true

          # Analyze test results
          if grep -q "FAIL" test-output.log; then
            echo "‚ùå Test failures found:"
            grep -A 5 -B 5 "FAIL" test-output.log
            echo "::error::Tests failed - see details above"
          else
            echo "‚úÖ All tests passed"
          fi

      - name: Build analysis with detailed logging
        run: |
          echo "üèóÔ∏è Running build analysis..."
          npm run build 2>&1 | tee build-output.log || true

          # Check build status
          if [ $? -eq 0 ]; then
            echo "‚úÖ Build completed successfully"
            echo "Build size analysis:"
            ls -la .next/static/chunks/ | head -20
          else
            echo "‚ùå Build failed:"
            tail -50 build-output.log
            echo "::error::Build failed - see details above"
          fi

      - name: GitHub API rate limit check
        run: |
          echo "üîç Checking GitHub API rate limits..."
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/rate_limit | jq '.'

      - name: Dependency analysis
        run: |
          echo "üì¶ Analyzing dependencies..."
          npm ls --depth=0 2>&1 | tee dependency-analysis.log || true

          # Check for dependency issues
          npm audit --audit-level=moderate 2>&1 | tee audit-output.log || true

          echo "Dependency tree summary:"
          wc -l package-lock.json

          echo "Node modules size:"
          du -sh node_modules/

      - name: Performance metrics
        run: |
          echo "‚ö° Collecting performance metrics..."

          # Test startup time
          start_time=$(date +%s%N)
          timeout 30s npm start &
          sleep 5
          end_time=$(date +%s%N)
          startup_time=$(( (end_time - start_time) / 1000000 ))
          echo "App startup time: ${startup_time}ms"

          # Kill the process
          pkill -f "next start" || true

      - name: Docker environment check
        run: |
          echo "üê≥ Docker environment analysis..."
          docker --version || echo "Docker not available"
          docker-compose --version || echo "Docker Compose not available"

          # Check if Docker daemon is accessible (if available)
          docker ps 2>&1 || echo "Docker daemon not accessible"

      - name: Database connectivity test
        run: |
          echo "üóÑÔ∏è Database connectivity test..."
          # Test database connection without starting full app
          node -e "
            const { PrismaClient } = require('@prisma/client');
            const prisma = new PrismaClient();
            prisma.\$connect()
              .then(() => {
                console.log('‚úÖ Database connection successful');
                return prisma.\$disconnect();
              })
              .catch(err => {
                console.log('‚ùå Database connection failed:', err.message);
                process.exit(1);
              });
          " 2>&1 || echo "Database test completed with errors"

      - name: Generate comprehensive report
        if: always()
        run: |
          echo "üìä Generating comprehensive diagnostic report..."

          cat > diagnostic-report.md << 'EOF'
          # CI/CD Diagnostic Report

          **Generated:** $(date)
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref }}
          **Event:** ${{ github.event_name }}

          ## Environment
          - Node.js: $(node --version)
          - NPM: $(npm --version)
          - OS: $(uname -a)

          ## Lint Results
          ```
          $(cat lint-output.log 2>/dev/null || echo "No lint output available")
          ```

          ## TypeScript Results
          ```
          $(tail -20 typescript-output.log 2>/dev/null || echo "No TypeScript output available")
          ```

          ## Test Results
          ```
          $(tail -20 test-output.log 2>/dev/null || echo "No test output available")
          ```

          ## Build Results
          ```
          $(tail -20 build-output.log 2>/dev/null || echo "No build output available")
          ```

          ## Dependency Analysis
          ```
          $(cat dependency-analysis.log 2>/dev/null || echo "No dependency analysis available")
          ```
          EOF

          echo "Report generated successfully"

      - name: Upload diagnostic artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-diagnostic-logs-${{ github.run_id }}
          path: |
            lint-output.log
            typescript-output.log
            test-output.log
            build-output.log
            dependency-analysis.log
            audit-output.log
            diagnostic-report.md
          retention-days: 7

      - name: Comment PR with diagnostic info
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let diagnosticComment = `
            ## üîç CI/CD Diagnostic Report

            **Run ID:** ${{ github.run_id }}
            **Commit:** ${{ github.sha }}
            **Triggered by:** ${{ github.event_name }}

            ### Quick Status
            `;

            // Add status for each step
            const steps = [
              { name: 'Lint', file: 'lint-output.log' },
              { name: 'TypeScript', file: 'typescript-output.log' },
              { name: 'Tests', file: 'test-output.log' },
              { name: 'Build', file: 'build-output.log' }
            ];

            for (const step of steps) {
              try {
                const output = fs.readFileSync(step.file, 'utf8');
                const hasErrors = output.includes('error') || output.includes('FAIL') || output.includes('failed');
                diagnosticComment += `- ${step.name}: ${hasErrors ? '‚ùå Failed' : '‚úÖ Passed'}\n`;
              } catch (e) {
                diagnosticComment += `- ${step.name}: ‚ö†Ô∏è No output\n`;
              }
            }

            diagnosticComment += `

            ### üìé Artifacts
            Detailed logs are available as artifacts in this workflow run.

            ### üîó Links
            - [Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Commit Details](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            `;

            // Post comment on PR
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: diagnosticComment
            });

  monitor-github-health:
    name: GitHub Repository Health Monitor
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Monitor repository metrics
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            console.log('üìä Repository Health Metrics:');

            // Get repository info
            const repoInfo = await github.rest.repos.get({ owner, repo });
            console.log(`Repository size: ${repoInfo.data.size} KB`);
            console.log(`Open issues: ${repoInfo.data.open_issues_count}`);
            console.log(`Watchers: ${repoInfo.data.watchers_count}`);
            console.log(`Forks: ${repoInfo.data.forks_count}`);

            // Get open PRs
            const prs = await github.rest.pulls.list({ 
              owner, 
              repo, 
              state: 'open' 
            });
            console.log(`Open PRs: ${prs.data.length}`);

            // Get recent commits
            const commits = await github.rest.repos.listCommits({
              owner,
              repo,
              per_page: 5
            });

            console.log('Recent commits:');
            commits.data.forEach(commit => {
              console.log(`  - ${commit.sha.substring(0, 7)}: ${commit.commit.message.split('\n')[0]}`);
            });

            // Check for stale branches
            const branches = await github.rest.repos.listBranches({ owner, repo });
            const staleBranches = [];
            const oneWeekAgo = new Date();
            oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);

            for (const branch of branches.data) {
              if (branch.name === 'main') continue;
              
              const branchCommit = await github.rest.repos.getCommit({
                owner,
                repo,
                ref: branch.commit.sha
              });
              
              if (new Date(branchCommit.data.commit.committer.date) < oneWeekAgo) {
                staleBranches.push(branch.name);
              }
            }

            if (staleBranches.length > 0) {
              console.log(`‚ö†Ô∏è Stale branches (older than 1 week): ${staleBranches.join(', ')}`);
            }
